"""
0BULLSHIT SaaS Backend Application
A memory-centric SaaS platform with Gemini LLM integration and investor matching capabilities.
"""

import os
import json
import asyncio
import logging
from datetime import datetime
from typing import List, Dict, Optional, Any, Union
from uuid import UUID, uuid4
import httpx
from dotenv import load_dotenv

from fastapi import FastAPI, HTTPException, Depends, status, BackgroundTasks, UploadFile, File
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, Field
from supabase import create_client, Client
import google.generativeai as genai

# Document processing imports
import PyPDF2
import pdfplumber
from docx import Document

# Load environment variables
load_dotenv()

# Import investor matching algorithms
try:
    from investor_matching_algo1 import algorithm_1_enhanced_keyword_matching
    from investor_matching_algo2 import algorithm_2_semantic_contextual_matching
except ImportError:
    logger.warning("Investor matching algorithms not found. Using placeholders.")
def algorithm_1_enhanced_keyword_matching(user_profile, investor_data, deep_research_keywords=None):
        return investor_data[:10] if investor_data else []

def algorithm_2_semantic_contextual_matching(user_profile, investor_data, deep_research_keywords=None):
        return investor_data[:10] if investor_data else []

# Environment variables
SUPABASE_URL = os.getenv("SUPABASE_URL")
if not SUPABASE_URL:
    raise ValueError("SUPABASE_URL environment variable is required")

SUPABASE_SERVICE_KEY = os.getenv("SUPABASE_SERVICE_KEY") or os.getenv("SUPABASE_SERVICE_ROLE_KEY")
if not SUPABASE_SERVICE_KEY:
    raise ValueError("SUPABASE_SERVICE_KEY or SUPABASE_SERVICE_ROLE_KEY environment variable is required")

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    raise ValueError("GEMINI_API_KEY environment variable is required")

# Initialize logging
logging.basicConfig(level=os.getenv("LOG_LEVEL", "INFO"))
logger = logging.getLogger(__name__)

# Initialize FastAPI app
app = FastAPI(
    title="0BULLSHIT SaaS API",
    description="Backend API for memory-centric investor matching and outreach platform",
    version="0.1.0"
)

# CORS middleware configuration
CORS_ORIGINS = os.getenv("CORS_ORIGINS", "*").split(",")
app.add_middleware(
    CORSMiddleware,
    allow_origins=CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Initialize Supabase client
try:
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)
    logger.info("Supabase client initialized successfully")
except Exception as e:
    logger.error(f"Failed to initialize Supabase client: {str(e)}")
    raise

# Initialize Gemini
try:
    genai.configure(api_key=GEMINI_API_KEY)
    logger.info("Gemini initialized successfully")
except Exception as e:
    logger.error(f"Failed to initialize Gemini: {str(e)}")
    raise

# Security
security = HTTPBearer()

# ... rest of the file ... 